{"version":3,"sources":["js/buildingHealth.js"],"names":["View","Data","Backbone","extend","defaults","id","cid","name","health","url","model","initialize","options","this","Marionette","template","regions","RegionSetter","onRender","onChildviewShowMarker","show","List","getRegion","Map","map","className","onAttach","console","warn","remove","triggerMethod","onInitMap","_this","mapOptions","scrollWheelZoom","L","el","attribution","minZoom","maxZoom","continuousWorld","tms","noWrap","addTo","dataset","attributes","coords","get","popup","_","$","html","classPostfix","sample","myIcon","divIcon","bounds","latLngBounds","setMaxBounds","on","panInsideBounds","animate","marker","icon","bindPopup","addLayer","latlng","lat","e","log","lng","tagName","ui","btnHolder","btns","mapBtn","toolsBtn","triggers","click header","click @ui.mapBtn","onToggleButtons","$el","toggleClass","onHideRegions","slideToggle","empty","onShowMap","removeClass","getUI","addClass","onShowTools","Tools","collection","fetch","collectionEvents","childView","ListItem","onChildviewOpenMap","view","sync","render","onSync","window","module_buildingHealth","models","Entry"],"mappings":"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","file":"buildingHealth.js","sourcesContent":["(function(){\r\n\t\r\nvar View = View || {};\r\nvar Data = Data || {};\r\nvar Behaviors = Behaviors || {};\r\n\r\nData.ListItem = Backbone.Model.extend({\r\n\tdefaults: function() {\r\n\t\treturn {\r\n\t\t\tid: this.cid,\r\n\t\t\tname: 'No-title',\r\n\t\t\thealth: 20\r\n\t\t}\r\n\t}\r\n});\r\nData.List = Backbone.Collection.extend({\r\n\turl: '/back/index.php/health',\r\n\tmodel: Data.ListItem,\r\n\tinitialize: function(options) {\r\n\t\tif (options.id) {\r\n\t\t\tthis.url = '/back/index.php/zones/'+options.id+'/units'\r\n\t\t}\r\n\t}\r\n});\r\n\r\nView.Entry = Marionette.View.extend({\r\n\ttemplate: '#buildingHealth-entry',\r\n\tregions: new RegionSetter('list', 'map'),\r\n\tinitialize: function(options) {\r\n\r\n\t},\r\n\tonRender: function() {\r\n\t\tthis.getRegion('list').show(new View.List(this.options));\r\n\t},\r\n\tonChildviewShowMarker: function(model) {\r\n\t\tthis.getRegion('map').show(new View.Map({\r\n\t\t\tmodel: model\r\n\t\t}))\r\n\t}\r\n});\r\n\r\nView.Map = Marionette.View.extend({\r\n\ttemplate: '#t-map',\r\n\tmap: null,\r\n\tclassName: 'mini-map',\r\n\tinitialize: function(options) {\r\n\t\tthis.model = options.model;\r\n\t},\r\n\tonAttach: function() {\r\n\t\tconsole.log(this.model);\r\n\t\tif (typeof L !== 'undefined') {\r\n\t\t\tconsole.warn(this.map);\r\n\t\t\tif (this.map != null) {\r\n\t\t\t\tthis.map.remove();\r\n\t\t\t}\r\n\t\t\tthis.triggerMethod('init:map')\r\n\t\t}\r\n\t},\r\n\tonInitMap: function() {\r\n\t\tvar mapOptions = {\r\n\t\t\tscrollWheelZoom: false,\r\n\t\t}\r\n\t\tthis.map = L.map(this.el, mapOptions);\r\n\t\tL.tileLayer('http://85.188.8.254/back/IB_floorplan_72.53mx72.53m/{z}/{x}/{y}.png', {\r\n\t\t\tattribution: '&copy; <a target=\"_blank\" href=\"http://tieto.com\">Tieto</a>',\r\n\t\t\tminZoom: 1,\r\n\t\t\tmaxZoom: 6,\r\n\t\t\tcontinuousWorld: false,\r\n\t\t\ttms: true,\r\n\t\t\tnoWrap: true\r\n\t\t}).addTo(this.map);\r\n\r\n\t\t\tdataset = this.model.attributes;\r\n\t\t\tvar coords = this.model.get('coordinates');\r\n\t\t\tvar popup = _.template($('#t-list-map-popup').html())(dataset);\r\n\t\t\tvar classPostfix = _.sample(['marker-success','marker-warning','marker-danger'])\r\n\t\t\tvar myIcon = L.divIcon({\r\n\t\t\t\tclassName: 'marker '+classPostfix\r\n\t\t\t});\r\n\t\t\tvar bounds = L.latLngBounds([[-180, -180], [180, 180]]);\r\n\t\t\tthis.map.setMaxBounds(bounds);\r\n\t\t\tthis.map.on('drag', () => {\r\n\t\t\t\tthis.map.panInsideBounds(bounds, { animate: true });\r\n\t\t\t});\r\n\t\t\tvar marker = L\r\n\t\t\t\t.marker(coords, {\r\n\t\t\t\t\ticon: myIcon,\r\n\t\t\t\t})\r\n\t\t\t\t.bindPopup(popup)\r\n\t\r\n\t\tthis.map.addLayer(marker);\r\n\t\tthis.map.setView(coords, 2);\r\n\t\tthis.map.on('click', function(e) {\r\n\t\t\tconsole.log([e.latlng.lat,e.latlng.lng]);    \r\n\t\t});\r\n\t\t// this.map.addLayer(popup);\r\n\t},\r\n})\r\n\r\nView.ListItem = Marionette.View.extend({\r\n\ttemplate: '#buildingHealth-listItem',\r\n\tclassName: 'list-group-item-light',\r\n\ttagName: 'li',\r\n\tregions: new RegionSetter('map','tools'),\r\n\tui: {\r\n\t\t'btnHolder' : '.btn-holder',\r\n\t\t'btns': '[data-action=\"trigger\"]',\r\n\t\t'mapBtn' : '[data-id=\"map\"]',\r\n\t\t'toolsBtn' : '[data-id=\"tools\"]',\r\n\t\t'closeBtn' : '[data-action=\"close\"]',\r\n\t},\r\n\ttriggers: {\r\n\t\t// click : 'open:map'\r\n\t\t'click header': 'toggle:buttons',\r\n\t\t'click @ui.mapBtn': 'show:map',\r\n\t\t'click @ui.toolsBtn': 'show:tools',\r\n\t\t// 'click @ui.closeBtn': 'close',\r\n \t},\r\n \tonToggleButtons: function() {\r\n \t\tthis.$el.toggleClass('opened');\r\n \t\tthis.getUI('btnHolder').slideToggle();\r\n \t\tthis.triggerMethod('hide:regions');\r\n \t},\r\n \tonHideRegions: function() {\r\n \t\tthis.getRegion('map').empty();\r\n \t\tthis.getRegion('tools').empty();\r\n \t\tthis.getUI('btns').removeClass('btn-fill');\r\n \t},\r\n \tonShowMap: function() {\r\n \t\tthis.triggerMethod('hide:regions');\r\n\r\n \t\tthis.getUI('mapBtn').addClass('btn-fill');\r\n \t\tthis.getRegion('map').show(new View.Map({\r\n \t\t\tmodel: this.model\r\n \t\t}));\r\n \t},\r\n \tonShowTools: function() {\r\n \t\tthis.triggerMethod('hide:regions');\r\n\r\n \t\tthis.getUI('toolsBtn').addClass('btn-fill');\r\n \t\tthis.getRegion('tools').show(new View.Tools({\r\n \t\t\tmodel: this.model\r\n \t\t}));\r\n\r\n \t}\r\n});\r\n\r\n\r\nView.Tools = Marionette.View.extend({\r\n\tclassName: 'list-group',\r\n\ttemplate: '#buildingHealth-tools',\r\n\tinitialize: function (options) {\r\n\t\tthis.model = options.model;\r\n\t},\r\n\r\n\r\n});\r\n\r\nView.List = Marionette.CollectionView.extend({\r\n\tclassName: 'list-group',\r\n\ttagName: 'ul',\r\n\tchildView: View.ListItem,\r\n\tinitialize: function(options) {\r\n\t\tthis.collection = new Data.List(options);\r\n\t\tthis.collection.fetch();\r\n\t},\r\n\tcollectionEvents: {\r\n\t\t'sync' : 'onSync'\r\n\t},\r\n\tonChildviewOpenMap: function(view) {\r\n\t\tconsole.log(view.model);\r\n\t\tvar model = view.model;\r\n\t\tthis.triggerMethod('show:marker',model);\r\n\t},\r\n\tonSync: function() {\r\n\t\tconsole.log(this.collection.models);\r\n\t\tthis.render();\r\n\t},\r\n\tonRender: function() {\r\n\t}\r\n})\r\n\r\n\r\n\r\n\r\nwindow.module_buildingHealth = {\r\n\tView: View,\r\n\tData: Data,\r\n\tEntry: View.Entry,\r\n}\r\nconsole.log(window['module_buildingHealth'])\r\n}());\r\n"]}